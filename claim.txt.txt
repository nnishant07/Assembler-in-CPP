/*****************************************************************************
TITLE: Claims																																
AUTHOR: Nishant Kumar (2101CS52)
Declaration of Authorship
This txt file, claims.txt, is part of the miniproject of CS209/CS210 at the 
department of Computer Science and Engg, IIT Patna . 
*****************************************************************************/

Files:
==========
*All the files I submitted, asm.c and emu.c and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler including the output files from the seven test examples has also been uploaded. They are test1(3 output files), test2(1 output files), test3
(3 output file), test4(3 output files) , bubbleSort(3 output files) and two additional tests(with output files). All the test files have been tested and work properly.

Note: output.txt are files generated by the emulator.

Compilation Instructions:
g++ asm.cpp
./a.out
g++ emu.cpp -o emu
./emu -[commands] filename.o

Note:
* Input files(the .asm file) must be present in the same folder where the code is executed
* Output files -> logfile.log and if there are no errors then machineCode.o file and listfile.lst file
* Mnemonic named “data” is always used at the end of assembly code.

=============================
Program format and structure:
=============================

1.  	* Every instruction is implemented.
    	* It contains a table of instruction mnemonics,operands,labels and operand type.
    	* It is a 2 pass assembler (implemented in asm.cpp)
	* outputs the required correct information in the form of three files
       	*  .log file for errors and warnings
       	*  .lst file for listing 
       	*  .o file for machine code object
	* All important errors are diagnosed and corresponding error file gets generated (named logfile.log)
	* Assembler can detect the following errors:
	- Bogus mnemonic
	- Label not found
	- Missing operand
	- More operands than expected
	- Invalid opcode syntax format
	- Incorret label format 
	*Can handle extra spaces between operands and extra whitespaces.
	* Advanced listing file gets generated. (named listfile.lst)
	* assembles test programs (including bubble sort)
        * Machine code object file gets generated (named machineCode.o)
	* SET instruction is also implemented.
    	* Code is written in C++ with optimum time and space complexity.
	* Additional tests with outputs is also included

2.	*My emulator is both interactive and log based. You can run each instruction line by line or output all the trace directly into output.txt
	* loads object file, 
	Emulator can do following things:
	- Trace current instruction only: -trace
	- See all read operations: -read
	- See all write opereration: -write
	- Trace all instructions at once: -run
	- See memory dump: -dump
	- To view instructions: -help
	- Print no. of instructions executed
	- Detect some types of segmentation faults
Note: SET and "data" hasnt been implemented in emu.cpp, other than that all instructions are present

=============================
Testing:
=============================

I have tested seven examples shown as below:

1)#Input: test1.asm
#Output: 
a. listCode.l 
b. logFile.log (without any error messages,but with a warning that HALT not present)
c. machineCode.o

For emulator
#Input: machineCode.o

Since test1.asm leads to infinite loop, emu.cpp produced runtime error

2)
#Input: test2.asm
#Output: 
a. logFile.log ((with error messages shown as below and also in log file)

Log code generated in: logFile.log
Error at line: 4 -- Type: Multiple declaration of label: label
Error at line: 5 -- Type: No such label / data variable
Error at line: 6 -- Type: Invalid number
Error at line: 7 -- Type: Invalid OPCode-Syntax combination
Error at line: 8 -- Type: Invalid OPCode-Syntax combination
Error at line: 9 -- Type: Invalid OPCode-Syntax combination
Error at line: 10 -- Type: Invalid label name
Error at line: 11 -- Type: Invalid Mnemonic
Error at line: 12 -- Type: Invalid Mnemonic

3)#Input: test3.asm
#Output: 
a. listCode.l 
b. logFile.log (without any error messages,but with a warning that HALT not present)
c. machineCode.o

For emulator
#Input: machineCode.o
#Output: output.txt
Since SET wasn't implemented, it produced for only 2-3 instructions

4)#Input: test4.asm
#Output: 
a. listCode.l 
b. logFile.log (without any error messages)
c. machineCode.o
For emulator
#Input: machineCode.o
#Output: output.txt


5)#Input: bubble_sort.asm
#Output: 
a. listCode.l 
b. logFile.log (without any error messages)
c. machineCode.o
For emulator
#Input: machineCode.o
#Output: output.txt


6)#Input: myalgo1.asm
#Output: 
a. listCode.l 
b. logFile.log (without any error messages,but with a warning that HALT not present)
c. machineCode.o
For emulator
#Input: machineCode.o
#Output: output.txt

7)#Input: myalgo2.asm
#Output: 
a. listCode.l 
b. logFile.log (without any error messages,but with a warning that HALT not present)
c. machineCode.o
For emulator
#Input: machineCode.o
#Output: output.txt